//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace AirPurifier { namespace Actions {

// Methods
public ref class ActionsSetPowerToOffCalledEventArgs sealed
{
public:
    ActionsSetPowerToOffCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetPowerToOffResult^ Result
    {
        ActionsSetPowerToOffResult^ get() { return m_result; }
        void set(_In_ ActionsSetPowerToOffResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetPowerToOffResult^>^ GetResultAsync(ActionsSetPowerToOffCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetPowerToOffResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetPowerToOffResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetPowerToOffResult^ m_result;
};

public ref class ActionsSetPowerToOnCalledEventArgs sealed
{
public:
    ActionsSetPowerToOnCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetPowerToOnResult^ Result
    {
        ActionsSetPowerToOnResult^ get() { return m_result; }
        void set(_In_ ActionsSetPowerToOnResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetPowerToOnResult^>^ GetResultAsync(ActionsSetPowerToOnCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetPowerToOnResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetPowerToOnResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetPowerToOnResult^ m_result;
};

public ref class ActionsSetFlowToHICalledEventArgs sealed
{
public:
    ActionsSetFlowToHICalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetFlowToHIResult^ Result
    {
        ActionsSetFlowToHIResult^ get() { return m_result; }
        void set(_In_ ActionsSetFlowToHIResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetFlowToHIResult^>^ GetResultAsync(ActionsSetFlowToHICalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetFlowToHIResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetFlowToHIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetFlowToHIResult^ m_result;
};

public ref class ActionsSetFlowToMEDCalledEventArgs sealed
{
public:
    ActionsSetFlowToMEDCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetFlowToMEDResult^ Result
    {
        ActionsSetFlowToMEDResult^ get() { return m_result; }
        void set(_In_ ActionsSetFlowToMEDResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetFlowToMEDResult^>^ GetResultAsync(ActionsSetFlowToMEDCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetFlowToMEDResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetFlowToMEDResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetFlowToMEDResult^ m_result;
};

public ref class ActionsSetFlowToLOWCalledEventArgs sealed
{
public:
    ActionsSetFlowToLOWCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetFlowToLOWResult^ Result
    {
        ActionsSetFlowToLOWResult^ get() { return m_result; }
        void set(_In_ ActionsSetFlowToLOWResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetFlowToLOWResult^>^ GetResultAsync(ActionsSetFlowToLOWCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetFlowToLOWResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetFlowToLOWResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetFlowToLOWResult^ m_result;
};

public ref class ActionsSetFlowToQUIETCalledEventArgs sealed
{
public:
    ActionsSetFlowToQUIETCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetFlowToQUIETResult^ Result
    {
        ActionsSetFlowToQUIETResult^ get() { return m_result; }
        void set(_In_ ActionsSetFlowToQUIETResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetFlowToQUIETResult^>^ GetResultAsync(ActionsSetFlowToQUIETCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetFlowToQUIETResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetFlowToQUIETResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetFlowToQUIETResult^ m_result;
};

public ref class ActionsSetFlowToAUTOCalledEventArgs sealed
{
public:
    ActionsSetFlowToAUTOCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetFlowToAUTOResult^ Result
    {
        ActionsSetFlowToAUTOResult^ get() { return m_result; }
        void set(_In_ ActionsSetFlowToAUTOResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetFlowToAUTOResult^>^ GetResultAsync(ActionsSetFlowToAUTOCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetFlowToAUTOResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetFlowToAUTOResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetFlowToAUTOResult^ m_result;
};

public ref class ActionsSetTimerTo8HCalledEventArgs sealed
{
public:
    ActionsSetTimerTo8HCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetTimerTo8HResult^ Result
    {
        ActionsSetTimerTo8HResult^ get() { return m_result; }
        void set(_In_ ActionsSetTimerTo8HResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetTimerTo8HResult^>^ GetResultAsync(ActionsSetTimerTo8HCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetTimerTo8HResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetTimerTo8HResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetTimerTo8HResult^ m_result;
};

public ref class ActionsSetTimerTo2HCalledEventArgs sealed
{
public:
    ActionsSetTimerTo2HCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetTimerTo2HResult^ Result
    {
        ActionsSetTimerTo2HResult^ get() { return m_result; }
        void set(_In_ ActionsSetTimerTo2HResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetTimerTo2HResult^>^ GetResultAsync(ActionsSetTimerTo2HCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetTimerTo2HResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetTimerTo2HResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetTimerTo2HResult^ m_result;
};

public ref class ActionsSetTimerTo1HCalledEventArgs sealed
{
public:
    ActionsSetTimerTo1HCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetTimerTo1HResult^ Result
    {
        ActionsSetTimerTo1HResult^ get() { return m_result; }
        void set(_In_ ActionsSetTimerTo1HResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetTimerTo1HResult^>^ GetResultAsync(ActionsSetTimerTo1HCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetTimerTo1HResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetTimerTo1HResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetTimerTo1HResult^ m_result;
};

public ref class ActionsSetTimerToOffCalledEventArgs sealed
{
public:
    ActionsSetTimerToOffCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetTimerToOffResult^ Result
    {
        ActionsSetTimerToOffResult^ get() { return m_result; }
        void set(_In_ ActionsSetTimerToOffResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetTimerToOffResult^>^ GetResultAsync(ActionsSetTimerToOffCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetTimerToOffResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetTimerToOffResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetTimerToOffResult^ m_result;
};

// Readable Properties
public ref class ActionsGetVersionRequestedEventArgs sealed
{
public:
    ActionsGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsGetVersionResult^ Result
    {
        ActionsGetVersionResult^ get() { return m_result; }
        void set(_In_ ActionsGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsGetVersionResult^>^ GetResultAsync(ActionsGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsGetVersionResult^ m_result;
};

// Writable Properties
} } } } 
