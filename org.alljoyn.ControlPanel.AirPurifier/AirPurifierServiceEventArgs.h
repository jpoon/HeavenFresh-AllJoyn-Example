//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace ControlPanel { namespace AirPurifier {

// Methods
public ref class AirPurifierPowerONCalledEventArgs sealed
{
public:
    AirPurifierPowerONCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierPowerONResult^ Result
    {
        AirPurifierPowerONResult^ get() { return m_result; }
        void set(_In_ AirPurifierPowerONResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierPowerONResult^>^ GetResultAsync(AirPurifierPowerONCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierPowerONResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierPowerONResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierPowerONResult^ m_result;
};

public ref class AirPurifierPowerOFFCalledEventArgs sealed
{
public:
    AirPurifierPowerOFFCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierPowerOFFResult^ Result
    {
        AirPurifierPowerOFFResult^ get() { return m_result; }
        void set(_In_ AirPurifierPowerOFFResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierPowerOFFResult^>^ GetResultAsync(AirPurifierPowerOFFCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierPowerOFFResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierPowerOFFResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierPowerOFFResult^ m_result;
};

public ref class AirPurifierResetCalledEventArgs sealed
{
public:
    AirPurifierResetCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierResetResult^ Result
    {
        AirPurifierResetResult^ get() { return m_result; }
        void set(_In_ AirPurifierResetResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierResetResult^>^ GetResultAsync(AirPurifierResetCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierResetResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierResetResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierResetResult^ m_result;
};

public ref class AirPurifierSendSoftwareUpgradeFileCalledEventArgs sealed
{
public:
    AirPurifierSendSoftwareUpgradeFileCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberCurrentIndex, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberFileData);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierSendSoftwareUpgradeFileResult^ Result
    {
        AirPurifierSendSoftwareUpgradeFileResult^ get() { return m_result; }
        void set(_In_ AirPurifierSendSoftwareUpgradeFileResult^ value) { m_result = value; }
    }

    property uint32 CurrentIndex
    {
        uint32 get() { return m_interfaceMemberCurrentIndex; }
    }

    property Windows::Foundation::Collections::IVectorView<byte>^ FileData
    {
        Windows::Foundation::Collections::IVectorView<byte>^ get() { return m_interfaceMemberFileData; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierSendSoftwareUpgradeFileResult^>^ GetResultAsync(AirPurifierSendSoftwareUpgradeFileCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierSendSoftwareUpgradeFileResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierSendSoftwareUpgradeFileResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierSendSoftwareUpgradeFileResult^ m_result;
    uint32 m_interfaceMemberCurrentIndex;
    Windows::Foundation::Collections::IVectorView<byte>^ m_interfaceMemberFileData;
};

// Readable Properties
public ref class AirPurifierGetPowerStatusRequestedEventArgs sealed
{
public:
    AirPurifierGetPowerStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetPowerStatusResult^ Result
    {
        AirPurifierGetPowerStatusResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetPowerStatusResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetPowerStatusResult^>^ GetResultAsync(AirPurifierGetPowerStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetPowerStatusResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetPowerStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetPowerStatusResult^ m_result;
};

public ref class AirPurifierGetFlowValueRequestedEventArgs sealed
{
public:
    AirPurifierGetFlowValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetFlowValueResult^ Result
    {
        AirPurifierGetFlowValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetFlowValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetFlowValueResult^>^ GetResultAsync(AirPurifierGetFlowValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetFlowValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetFlowValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetFlowValueResult^ m_result;
};

public ref class AirPurifierGetTimerValueRequestedEventArgs sealed
{
public:
    AirPurifierGetTimerValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetTimerValueResult^ Result
    {
        AirPurifierGetTimerValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetTimerValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetTimerValueResult^>^ GetResultAsync(AirPurifierGetTimerValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetTimerValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetTimerValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetTimerValueResult^ m_result;
};

public ref class AirPurifierGetSensorOdorValueRequestedEventArgs sealed
{
public:
    AirPurifierGetSensorOdorValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetSensorOdorValueResult^ Result
    {
        AirPurifierGetSensorOdorValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetSensorOdorValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetSensorOdorValueResult^>^ GetResultAsync(AirPurifierGetSensorOdorValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetSensorOdorValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetSensorOdorValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetSensorOdorValueResult^ m_result;
};

public ref class AirPurifierGetSensorDustValueRequestedEventArgs sealed
{
public:
    AirPurifierGetSensorDustValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetSensorDustValueResult^ Result
    {
        AirPurifierGetSensorDustValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetSensorDustValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetSensorDustValueResult^>^ GetResultAsync(AirPurifierGetSensorDustValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetSensorDustValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetSensorDustValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetSensorDustValueResult^ m_result;
};

public ref class AirPurifierGetSensorAllergenValueRequestedEventArgs sealed
{
public:
    AirPurifierGetSensorAllergenValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetSensorAllergenValueResult^ Result
    {
        AirPurifierGetSensorAllergenValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetSensorAllergenValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetSensorAllergenValueResult^>^ GetResultAsync(AirPurifierGetSensorAllergenValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetSensorAllergenValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetSensorAllergenValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetSensorAllergenValueResult^ m_result;
};

public ref class AirPurifierGetSensorCleanMetalGridValueRequestedEventArgs sealed
{
public:
    AirPurifierGetSensorCleanMetalGridValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetSensorCleanMetalGridValueResult^ Result
    {
        AirPurifierGetSensorCleanMetalGridValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetSensorCleanMetalGridValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetSensorCleanMetalGridValueResult^>^ GetResultAsync(AirPurifierGetSensorCleanMetalGridValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetSensorCleanMetalGridValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetSensorCleanMetalGridValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetSensorCleanMetalGridValueResult^ m_result;
};

public ref class AirPurifierGetSensorReplaceFilterValueRequestedEventArgs sealed
{
public:
    AirPurifierGetSensorReplaceFilterValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetSensorReplaceFilterValueResult^ Result
    {
        AirPurifierGetSensorReplaceFilterValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetSensorReplaceFilterValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetSensorReplaceFilterValueResult^>^ GetResultAsync(AirPurifierGetSensorReplaceFilterValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetSensorReplaceFilterValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetSensorReplaceFilterValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetSensorReplaceFilterValueResult^ m_result;
};

public ref class AirPurifierGetSensorCleanMonitorValueRequestedEventArgs sealed
{
public:
    AirPurifierGetSensorCleanMonitorValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property AirPurifierGetSensorCleanMonitorValueResult^ Result
    {
        AirPurifierGetSensorCleanMonitorValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierGetSensorCleanMonitorValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<AirPurifierGetSensorCleanMonitorValueResult^>^ GetResultAsync(AirPurifierGetSensorCleanMonitorValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierGetSensorCleanMonitorValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierGetSensorCleanMonitorValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    AirPurifierGetSensorCleanMonitorValueResult^ m_result;
};

// Writable Properties
public ref class AirPurifierSetPowerStatusRequestedEventArgs sealed
{
public:
    AirPurifierSetPowerStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property AirPurifierSetPowerStatusResult^ Result
    {
        AirPurifierSetPowerStatusResult^ get() { return m_result; }
        void set(_In_ AirPurifierSetPowerStatusResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<AirPurifierSetPowerStatusResult^>^ GetResultAsync(AirPurifierSetPowerStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierSetPowerStatusResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierSetPowerStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    AirPurifierSetPowerStatusResult^ m_result;
};

public ref class AirPurifierSetFlowValueRequestedEventArgs sealed
{
public:
    AirPurifierSetFlowValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property AirPurifierSetFlowValueResult^ Result
    {
        AirPurifierSetFlowValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierSetFlowValueResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<AirPurifierSetFlowValueResult^>^ GetResultAsync(AirPurifierSetFlowValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierSetFlowValueResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierSetFlowValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    AirPurifierSetFlowValueResult^ m_result;
};

public ref class AirPurifierSetTimerValueRequestedEventArgs sealed
{
public:
    AirPurifierSetTimerValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property AirPurifierSetTimerValueResult^ Result
    {
        AirPurifierSetTimerValueResult^ get() { return m_result; }
        void set(_In_ AirPurifierSetTimerValueResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<AirPurifierSetTimerValueResult^>^ GetResultAsync(AirPurifierSetTimerValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<AirPurifierSetTimerValueResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<AirPurifierSetTimerValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    AirPurifierSetTimerValueResult^ m_result;
};

} } } } 
