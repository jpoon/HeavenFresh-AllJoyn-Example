//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Devices::AllJoyn;
using namespace org::alljoyn::ControlPanel::AirPurifier;

// Note: Unlike an Interface implementation, which provides a single handler for each member, the event
// model allows for 0 or more listeners to be registered. The EventAdapter implementation deals with this
// difference by implementing a last-writer-wins policy. The lack of any return value (i.e., 0 listeners)
// is handled by returning a null result.

// Methods
IAsyncOperation<AirPurifierPowerONResult^>^ AirPurifierServiceEventAdapter::PowerONAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierPowerONCalledEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        PowerONCalled(this, args);
    });
    return AirPurifierPowerONCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierPowerOFFResult^>^ AirPurifierServiceEventAdapter::PowerOFFAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierPowerOFFCalledEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        PowerOFFCalled(this, args);
    });
    return AirPurifierPowerOFFCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierResetResult^>^ AirPurifierServiceEventAdapter::ResetAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierResetCalledEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        ResetCalled(this, args);
    });
    return AirPurifierResetCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierSendSoftwareUpgradeFileResult^>^ AirPurifierServiceEventAdapter::SendSoftwareUpgradeFileAsync(_In_ AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberCurrentIndex, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberFileData)
{
    auto args = ref new AirPurifierSendSoftwareUpgradeFileCalledEventArgs(info, interfaceMemberCurrentIndex, interfaceMemberFileData);
    AllJoynHelpers::DispatchEvent([=]() {
        SendSoftwareUpgradeFileCalled(this, args);
    });
    return AirPurifierSendSoftwareUpgradeFileCalledEventArgs::GetResultAsync(args);
}

// Property Reads
IAsyncOperation<AirPurifierGetPowerStatusResult^>^ AirPurifierServiceEventAdapter::GetPowerStatusAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetPowerStatusRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetPowerStatusRequested(this, args);
    });
    return AirPurifierGetPowerStatusRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetFlowValueResult^>^ AirPurifierServiceEventAdapter::GetFlowValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetFlowValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetFlowValueRequested(this, args);
    });
    return AirPurifierGetFlowValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetTimerValueResult^>^ AirPurifierServiceEventAdapter::GetTimerValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetTimerValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetTimerValueRequested(this, args);
    });
    return AirPurifierGetTimerValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetSensorOdorValueResult^>^ AirPurifierServiceEventAdapter::GetSensorOdorValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetSensorOdorValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetSensorOdorValueRequested(this, args);
    });
    return AirPurifierGetSensorOdorValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetSensorDustValueResult^>^ AirPurifierServiceEventAdapter::GetSensorDustValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetSensorDustValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetSensorDustValueRequested(this, args);
    });
    return AirPurifierGetSensorDustValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetSensorAllergenValueResult^>^ AirPurifierServiceEventAdapter::GetSensorAllergenValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetSensorAllergenValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetSensorAllergenValueRequested(this, args);
    });
    return AirPurifierGetSensorAllergenValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetSensorCleanMetalGridValueResult^>^ AirPurifierServiceEventAdapter::GetSensorCleanMetalGridValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetSensorCleanMetalGridValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetSensorCleanMetalGridValueRequested(this, args);
    });
    return AirPurifierGetSensorCleanMetalGridValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetSensorReplaceFilterValueResult^>^ AirPurifierServiceEventAdapter::GetSensorReplaceFilterValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetSensorReplaceFilterValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetSensorReplaceFilterValueRequested(this, args);
    });
    return AirPurifierGetSensorReplaceFilterValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierGetSensorCleanMonitorValueResult^>^ AirPurifierServiceEventAdapter::GetSensorCleanMonitorValueAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new AirPurifierGetSensorCleanMonitorValueRequestedEventArgs(info);
    AllJoynHelpers::DispatchEvent([=]() {
        GetSensorCleanMonitorValueRequested(this, args);
    });
    return AirPurifierGetSensorCleanMonitorValueRequestedEventArgs::GetResultAsync(args);
}

// Property Writes
IAsyncOperation<AirPurifierSetPowerStatusResult^>^ AirPurifierServiceEventAdapter::SetPowerStatusAsync(_In_ AllJoynMessageInfo^ info, _In_ int32 value)
{
    auto args = ref new AirPurifierSetPowerStatusRequestedEventArgs(info, value);
    AllJoynHelpers::DispatchEvent([=]() {
        SetPowerStatusRequested(this, args);
    });
    return AirPurifierSetPowerStatusRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierSetFlowValueResult^>^ AirPurifierServiceEventAdapter::SetFlowValueAsync(_In_ AllJoynMessageInfo^ info, _In_ int32 value)
{
    auto args = ref new AirPurifierSetFlowValueRequestedEventArgs(info, value);
    AllJoynHelpers::DispatchEvent([=]() {
        SetFlowValueRequested(this, args);
    });
    return AirPurifierSetFlowValueRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<AirPurifierSetTimerValueResult^>^ AirPurifierServiceEventAdapter::SetTimerValueAsync(_In_ AllJoynMessageInfo^ info, _In_ int32 value)
{
    auto args = ref new AirPurifierSetTimerValueRequestedEventArgs(info, value);
    AllJoynHelpers::DispatchEvent([=]() {
        SetTimerValueRequested(this, args);
    });
    return AirPurifierSetTimerValueRequestedEventArgs::GetResultAsync(args);
}

