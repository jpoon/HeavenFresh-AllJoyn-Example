//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace ControlPanel { namespace Humidifier {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IHumidifierService. Instead, HumidifierServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class HumidifierServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IHumidifierService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierPowerONCalledEventArgs^>^ PowerONCalled;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierPowerOFFCalledEventArgs^>^ PowerOFFCalled;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSendSoftwareUpgradeFileCalledEventArgs^>^ SendSoftwareUpgradeFileCalled;

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetPowerStatusRequestedEventArgs^>^ GetPowerStatusRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetHumidityValueRequestedEventArgs^>^ GetHumidityValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetIonStatusRequestedEventArgs^>^ GetIonStatusRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetWarmMistStatusRequestedEventArgs^>^ GetWarmMistStatusRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetMistVolumeValueRequestedEventArgs^>^ GetMistVolumeValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetTimerValueRequestedEventArgs^>^ GetTimerValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetCurrentRoomTempValueRequestedEventArgs^>^ GetCurrentRoomTempValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetCurrentRoomHumidityValueRequestedEventArgs^>^ GetCurrentRoomHumidityValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierGetWaterTankStatusRequestedEventArgs^>^ GetWaterTankStatusRequested;
    
    // Property Write Events
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSetPowerStatusRequestedEventArgs^>^ SetPowerStatusRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSetHumidityValueRequestedEventArgs^>^ SetHumidityValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSetIonStatusRequestedEventArgs^>^ SetIonStatusRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSetWarmMistStatusRequestedEventArgs^>^ SetWarmMistStatusRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSetMistVolumeValueRequestedEventArgs^>^ SetMistVolumeValueRequested;
    event Windows::Foundation::TypedEventHandler<HumidifierServiceEventAdapter^, HumidifierSetTimerValueRequestedEventArgs^>^ SetTimerValueRequested;

    // IHumidifierService Implementation
    virtual Windows::Foundation::IAsyncOperation<HumidifierPowerONResult^>^ PowerONAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierPowerOFFResult^>^ PowerOFFAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierSendSoftwareUpgradeFileResult^>^ SendSoftwareUpgradeFileAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberCurrentIndex, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberFileData);

    virtual Windows::Foundation::IAsyncOperation<HumidifierGetPowerStatusResult^>^ GetPowerStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetHumidityValueResult^>^ GetHumidityValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetIonStatusResult^>^ GetIonStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetWarmMistStatusResult^>^ GetWarmMistStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetMistVolumeValueResult^>^ GetMistVolumeValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetTimerValueResult^>^ GetTimerValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetCurrentRoomTempValueResult^>^ GetCurrentRoomTempValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetCurrentRoomHumidityValueResult^>^ GetCurrentRoomHumidityValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<HumidifierGetWaterTankStatusResult^>^ GetWaterTankStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<HumidifierSetPowerStatusResult^>^ SetPowerStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);
    virtual Windows::Foundation::IAsyncOperation<HumidifierSetHumidityValueResult^>^ SetHumidityValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);
    virtual Windows::Foundation::IAsyncOperation<HumidifierSetIonStatusResult^>^ SetIonStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);
    virtual Windows::Foundation::IAsyncOperation<HumidifierSetWarmMistStatusResult^>^ SetWarmMistStatusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);
    virtual Windows::Foundation::IAsyncOperation<HumidifierSetMistVolumeValueResult^>^ SetMistVolumeValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);
    virtual Windows::Foundation::IAsyncOperation<HumidifierSetTimerValueResult^>^ SetTimerValueAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);
};

} } } } 
