//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace ControlPanel { namespace Humidifier {

public interface class IHumidifierConsumer
{
    event Windows::Foundation::TypedEventHandler<HumidifierConsumer^, Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs^>^ SessionLost;
    event Windows::Foundation::TypedEventHandler<HumidifierConsumer^, Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs^>^ SessionMemberAdded;
    event Windows::Foundation::TypedEventHandler<HumidifierConsumer^, Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs^>^ SessionMemberRemoved;
};

public ref class HumidifierConsumer sealed  : [Windows::Foundation::Metadata::Default] IHumidifierConsumer
{
public:
    HumidifierConsumer(Windows::Devices::AllJoyn::AllJoynBusAttachment^ busAttachment);
    virtual ~HumidifierConsumer();

    // Join the AllJoyn session specified by sessionName.
    //
    // This will usually be called after the unique name of a producer has been reported
    // in the Added callback on the Watcher.
    static Windows::Foundation::IAsyncOperation<HumidifierJoinSessionResult^>^ JoinSessionAsync(_In_ Windows::Devices::AllJoyn::AllJoynServiceInfo^ serviceInfo, _Inout_ HumidifierWatcher^ watcher);

    // Call the PowerON method
    Windows::Foundation::IAsyncOperation<HumidifierPowerONResult^>^ PowerONAsync();
    // Call the PowerOFF method
    Windows::Foundation::IAsyncOperation<HumidifierPowerOFFResult^>^ PowerOFFAsync();
    // Call the SendSoftwareUpgradeFile method
    Windows::Foundation::IAsyncOperation<HumidifierSendSoftwareUpgradeFileResult^>^ SendSoftwareUpgradeFileAsync(_In_ uint32 interfaceMemberCurrentIndex, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberFileData);
    // Get the value of the powerStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierGetPowerStatusResult^>^ GetPowerStatusAsync();

    // Set the value of the powerStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierSetPowerStatusResult^>^ SetPowerStatusAsync(_In_ int32 value);
    // Get the value of the humidityValue property.
    Windows::Foundation::IAsyncOperation<HumidifierGetHumidityValueResult^>^ GetHumidityValueAsync();

    // Set the value of the humidityValue property.
    Windows::Foundation::IAsyncOperation<HumidifierSetHumidityValueResult^>^ SetHumidityValueAsync(_In_ int32 value);
    // Get the value of the ionStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierGetIonStatusResult^>^ GetIonStatusAsync();

    // Set the value of the ionStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierSetIonStatusResult^>^ SetIonStatusAsync(_In_ int32 value);
    // Get the value of the warmMistStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierGetWarmMistStatusResult^>^ GetWarmMistStatusAsync();

    // Set the value of the warmMistStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierSetWarmMistStatusResult^>^ SetWarmMistStatusAsync(_In_ int32 value);
    // Get the value of the mistVolumeValue property.
    Windows::Foundation::IAsyncOperation<HumidifierGetMistVolumeValueResult^>^ GetMistVolumeValueAsync();

    // Set the value of the mistVolumeValue property.
    Windows::Foundation::IAsyncOperation<HumidifierSetMistVolumeValueResult^>^ SetMistVolumeValueAsync(_In_ int32 value);
    // Get the value of the timerValue property.
    Windows::Foundation::IAsyncOperation<HumidifierGetTimerValueResult^>^ GetTimerValueAsync();

    // Set the value of the timerValue property.
    Windows::Foundation::IAsyncOperation<HumidifierSetTimerValueResult^>^ SetTimerValueAsync(_In_ int32 value);
    // Get the value of the currentRoomTempValue property.
    Windows::Foundation::IAsyncOperation<HumidifierGetCurrentRoomTempValueResult^>^ GetCurrentRoomTempValueAsync();

    // Get the value of the currentRoomHumidityValue property.
    Windows::Foundation::IAsyncOperation<HumidifierGetCurrentRoomHumidityValueResult^>^ GetCurrentRoomHumidityValueAsync();

    // Get the value of the waterTankStatus property.
    Windows::Foundation::IAsyncOperation<HumidifierGetWaterTankStatusResult^>^ GetWaterTankStatusAsync();


    // Used to send signals or register functions to handle received signals.
    property HumidifierSignals^ Signals
    {
        HumidifierSignals^ get() { return m_signals; }
    }

    // This event will fire whenever the consumer loses the session that it is a member of.
    virtual event Windows::Foundation::TypedEventHandler<HumidifierConsumer^, Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs^>^ SessionLost;

    // This event will fire whenever a member joins the session.
    virtual event Windows::Foundation::TypedEventHandler<HumidifierConsumer^, Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs^>^ SessionMemberAdded;

    // This event will fire whenever a member leaves the session.
    virtual event Windows::Foundation::TypedEventHandler<HumidifierConsumer^, Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs^>^ SessionMemberRemoved;

internal:
    // Consumers do not support property get.
    QStatus OnPropertyGet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _Inout_ alljoyn_msgarg val) 
    { 
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val); 
        return ER_NOT_IMPLEMENTED; 
    }

    // Consumers do not support property set.
    QStatus OnPropertySet(_In_ PCSTR interfaceName, _In_ PCSTR propertyName, _In_ alljoyn_msgarg val) 
    { 
        UNREFERENCED_PARAMETER(interfaceName); UNREFERENCED_PARAMETER(propertyName); UNREFERENCED_PARAMETER(val);
        return ER_NOT_IMPLEMENTED;
    }

    void OnSessionLost(_In_ alljoyn_sessionid sessionId, _In_ alljoyn_sessionlostreason reason);
    void OnSessionMemberAdded(_In_ alljoyn_sessionid sessionId, _In_ PCSTR uniqueName);
    void OnSessionMemberRemoved(_In_ alljoyn_sessionid sessionId, _In_ PCSTR uniqueName);

    void OnPropertyChanged(_In_ alljoyn_proxybusobject obj, _In_ PCSTR interfaceName, _In_ const alljoyn_msgarg changed, _In_ const alljoyn_msgarg invalidated);

    property Platform::String^ ServiceObjectPath
    {
        Platform::String^ get() { return m_ServiceObjectPath; }
        void set(Platform::String^ value) { m_ServiceObjectPath = value; }
    }

    property alljoyn_proxybusobject ProxyBusObject
    {
        alljoyn_proxybusobject get() { return m_proxyBusObject; }
        void set(alljoyn_proxybusobject value) { m_proxyBusObject = value; }
    }

    property alljoyn_busobject BusObject
    {
        alljoyn_busobject get() { return m_busObject; }
        void set(alljoyn_busobject value) { m_busObject = value; }
    }
    
    property alljoyn_sessionlistener SessionListener
    {
        alljoyn_sessionlistener get() { return m_sessionListener; }
        void set(alljoyn_sessionlistener value) { m_sessionListener = value; }
    }

    property alljoyn_sessionid SessionId
    {
        alljoyn_sessionid get() { return m_sessionId; }
    }
    
private:
    int32 JoinSession(_In_ Windows::Devices::AllJoyn::AllJoynServiceInfo^ serviceInfo);

    // Register a callback function to handle incoming signals.
    QStatus AddSignalHandler(_In_ alljoyn_busattachment busAttachment, _In_ alljoyn_interfacedescription interfaceDescription, _In_ PCSTR methodName, _In_ alljoyn_messagereceiver_signalhandler_ptr handler);

    static void CallCurrentRoomTempValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallCurrentRoomHumidityValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallWaterTankStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallPowerStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallHumidityValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallIonStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallWarmMistStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallMistVolumeValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    static void CallTimerValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message);
    
    Windows::Devices::AllJoyn::AllJoynBusAttachment^ m_busAttachment;
    HumidifierSignals^ m_signals;
    Platform::String^ m_ServiceObjectPath;

    alljoyn_proxybusobject m_proxyBusObject;
    alljoyn_busobject m_busObject;
    alljoyn_sessionlistener m_sessionListener;
    alljoyn_sessionid m_sessionId;
    alljoyn_busattachment m_nativeBusAttachment;

    // Used to pass a pointer to this class to callbacks
    Platform::WeakReference* m_weak;

    // This map is required because we need a way to pass the consumer to the signal
    // handlers, but the current AllJoyn C API does not allow passing a context to these
    // callbacks.
    static std::map<alljoyn_interfacedescription, Platform::WeakReference*> SourceInterfaces;
};

} } } } 
