//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace concurrency;
using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Devices::AllJoyn;
using namespace org::alljoyn::ControlPanel::Humidifier;

std::map<alljoyn_interfacedescription, WeakReference*> HumidifierConsumer::SourceInterfaces;

HumidifierConsumer::HumidifierConsumer(AllJoynBusAttachment^ busAttachment)
    : m_busAttachment(busAttachment),
    m_proxyBusObject(nullptr),
    m_busObject(nullptr),
    m_sessionListener(nullptr),
    m_sessionId(0)
{
    m_weak = new WeakReference(this);
    m_signals = ref new HumidifierSignals();
    m_nativeBusAttachment = AllJoynHelpers::GetInternalBusAttachment(m_busAttachment);
}

HumidifierConsumer::~HumidifierConsumer()
{
    AllJoynBusObjectManager::ReleaseBusObject(m_nativeBusAttachment, AllJoynHelpers::PlatformToMultibyteString(ServiceObjectPath).data());
    if (SessionListener != nullptr)
    {
        alljoyn_busattachment_setsessionlistener(m_nativeBusAttachment, m_sessionId, nullptr);
        alljoyn_sessionlistener_destroy(SessionListener);
    }
    if (nullptr != ProxyBusObject)
    {
        alljoyn_proxybusobject_destroy(ProxyBusObject);
    }
    delete m_weak;
}

void HumidifierConsumer::OnSessionLost(_In_ alljoyn_sessionid sessionId, _In_ alljoyn_sessionlostreason reason)
{
    if (sessionId == m_sessionId)
    {
        AllJoynSessionLostEventArgs^ args = ref new AllJoynSessionLostEventArgs(static_cast<AllJoynSessionLostReason>(reason));
        AllJoynHelpers::DispatchEvent([=]() {
            SessionLost(this, args);
        });
    }
}

void HumidifierConsumer::OnSessionMemberAdded(_In_ alljoyn_sessionid sessionId, _In_ PCSTR uniqueName)
{
    if (sessionId == m_sessionId)
    {
        auto args = ref new AllJoynSessionMemberAddedEventArgs(AllJoynHelpers::MultibyteToPlatformString(uniqueName));
        AllJoynHelpers::DispatchEvent([=]() {
            SessionMemberAdded(this, args);
        });
    }
}

void HumidifierConsumer::OnSessionMemberRemoved(_In_ alljoyn_sessionid sessionId, _In_ PCSTR uniqueName)
{
    if (sessionId == m_sessionId)
    {
        auto args = ref new AllJoynSessionMemberRemovedEventArgs(AllJoynHelpers::MultibyteToPlatformString(uniqueName));
        AllJoynHelpers::DispatchEvent([=]() {
            SessionMemberRemoved(this, args);
        });
    }
}

QStatus HumidifierConsumer::AddSignalHandler(_In_ alljoyn_busattachment busAttachment, _In_ alljoyn_interfacedescription interfaceDescription, _In_ PCSTR methodName, _In_ alljoyn_messagereceiver_signalhandler_ptr handler)
{
    alljoyn_interfacedescription_member member;
    if (!alljoyn_interfacedescription_getmember(interfaceDescription, methodName, &member))
    {
        return ER_BUS_INTERFACE_NO_SUCH_MEMBER;
    }

    return alljoyn_busattachment_registersignalhandler(busAttachment, handler, member, NULL);
}

IAsyncOperation<HumidifierJoinSessionResult^>^ HumidifierConsumer::JoinSessionAsync(
    _In_ AllJoynServiceInfo^ serviceInfo, _Inout_ HumidifierWatcher^ watcher)
{
    return create_async([serviceInfo, watcher]() -> HumidifierJoinSessionResult^
    {
        auto result = ref new HumidifierJoinSessionResult();
        result->Status = AllJoynStatus::Ok;
        result->Consumer = nullptr;

        result->Consumer = ref new HumidifierConsumer(watcher->BusAttachment);
        result->Status = result->Consumer->JoinSession(serviceInfo);

        return result;
    });
}

IAsyncOperation<HumidifierPowerONResult^>^ HumidifierConsumer::PowerONAsync()
{
    return create_async([this]() -> HumidifierPowerONResult^
    {
        auto result = ref new HumidifierPowerONResult();
        
        alljoyn_message message = alljoyn_message_create(m_nativeBusAttachment);
        size_t argCount = 0;
        alljoyn_msgarg inputs = alljoyn_msgarg_array_create(argCount);

        
        QStatus status = alljoyn_proxybusobject_methodcall(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "PowerON",
            inputs,
            argCount,
            message,
            c_MessageTimeoutInMilliseconds,
            0);
        result->Status = static_cast<int>(status);
        
        alljoyn_message_destroy(message);
        alljoyn_msgarg_destroy(inputs);

        return result;
    });
}
IAsyncOperation<HumidifierPowerOFFResult^>^ HumidifierConsumer::PowerOFFAsync()
{
    return create_async([this]() -> HumidifierPowerOFFResult^
    {
        auto result = ref new HumidifierPowerOFFResult();
        
        alljoyn_message message = alljoyn_message_create(m_nativeBusAttachment);
        size_t argCount = 0;
        alljoyn_msgarg inputs = alljoyn_msgarg_array_create(argCount);

        
        QStatus status = alljoyn_proxybusobject_methodcall(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "PowerOFF",
            inputs,
            argCount,
            message,
            c_MessageTimeoutInMilliseconds,
            0);
        result->Status = static_cast<int>(status);
        
        alljoyn_message_destroy(message);
        alljoyn_msgarg_destroy(inputs);

        return result;
    });
}
IAsyncOperation<HumidifierSendSoftwareUpgradeFileResult^>^ HumidifierConsumer::SendSoftwareUpgradeFileAsync(_In_ uint32 interfaceMemberCurrentIndex, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberFileData)
{
    return create_async([this, interfaceMemberCurrentIndex, interfaceMemberFileData]() -> HumidifierSendSoftwareUpgradeFileResult^
    {
        auto result = ref new HumidifierSendSoftwareUpgradeFileResult();
        
        alljoyn_message message = alljoyn_message_create(m_nativeBusAttachment);
        size_t argCount = 2;
        alljoyn_msgarg inputs = alljoyn_msgarg_array_create(argCount);

        TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(inputs, 0), "u", interfaceMemberCurrentIndex);
        TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(inputs, 1), "ay", interfaceMemberFileData);
        
        QStatus status = alljoyn_proxybusobject_methodcall(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "SendSoftwareUpgradeFile",
            inputs,
            argCount,
            message,
            c_MessageTimeoutInMilliseconds,
            0);
        result->Status = static_cast<int>(status);
        
        alljoyn_message_destroy(message);
        alljoyn_msgarg_destroy(inputs);

        return result;
    });
}

IAsyncOperation<HumidifierSetPowerStatusResult^>^ HumidifierConsumer::SetPowerStatusAsync(_In_ int32 value)
{
    return create_async([this, value]() -> HumidifierSetPowerStatusResult^
    {
        PropertySetContext setContext;

        alljoyn_msgarg inputArgument = alljoyn_msgarg_create();
        TypeConversionHelpers::SetAllJoynMessageArg(inputArgument, "i", value);

        alljoyn_proxybusobject_setpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "powerStatus",
            inputArgument,
            [](QStatus status, alljoyn_proxybusobject obj, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertySetContext*>(context);
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &setContext);

        alljoyn_msgarg_destroy(inputArgument);

        setContext.Wait();

        auto result = ref new HumidifierSetPowerStatusResult();
        result->Status = setContext.GetStatus();
        return result;
    });
}

IAsyncOperation<HumidifierGetPowerStatusResult^>^ HumidifierConsumer::GetPowerStatusAsync()
{
    return create_async([this]() -> HumidifierGetPowerStatusResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "powerStatus",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetPowerStatusResult();
        result->Status = getContext.GetStatus();
        result->PowerStatus = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierSetHumidityValueResult^>^ HumidifierConsumer::SetHumidityValueAsync(_In_ int32 value)
{
    return create_async([this, value]() -> HumidifierSetHumidityValueResult^
    {
        PropertySetContext setContext;

        alljoyn_msgarg inputArgument = alljoyn_msgarg_create();
        TypeConversionHelpers::SetAllJoynMessageArg(inputArgument, "i", value);

        alljoyn_proxybusobject_setpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "humidityValue",
            inputArgument,
            [](QStatus status, alljoyn_proxybusobject obj, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertySetContext*>(context);
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &setContext);

        alljoyn_msgarg_destroy(inputArgument);

        setContext.Wait();

        auto result = ref new HumidifierSetHumidityValueResult();
        result->Status = setContext.GetStatus();
        return result;
    });
}

IAsyncOperation<HumidifierGetHumidityValueResult^>^ HumidifierConsumer::GetHumidityValueAsync()
{
    return create_async([this]() -> HumidifierGetHumidityValueResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "humidityValue",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetHumidityValueResult();
        result->Status = getContext.GetStatus();
        result->HumidityValue = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierSetIonStatusResult^>^ HumidifierConsumer::SetIonStatusAsync(_In_ int32 value)
{
    return create_async([this, value]() -> HumidifierSetIonStatusResult^
    {
        PropertySetContext setContext;

        alljoyn_msgarg inputArgument = alljoyn_msgarg_create();
        TypeConversionHelpers::SetAllJoynMessageArg(inputArgument, "i", value);

        alljoyn_proxybusobject_setpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "ionStatus",
            inputArgument,
            [](QStatus status, alljoyn_proxybusobject obj, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertySetContext*>(context);
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &setContext);

        alljoyn_msgarg_destroy(inputArgument);

        setContext.Wait();

        auto result = ref new HumidifierSetIonStatusResult();
        result->Status = setContext.GetStatus();
        return result;
    });
}

IAsyncOperation<HumidifierGetIonStatusResult^>^ HumidifierConsumer::GetIonStatusAsync()
{
    return create_async([this]() -> HumidifierGetIonStatusResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "ionStatus",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetIonStatusResult();
        result->Status = getContext.GetStatus();
        result->IonStatus = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierSetWarmMistStatusResult^>^ HumidifierConsumer::SetWarmMistStatusAsync(_In_ int32 value)
{
    return create_async([this, value]() -> HumidifierSetWarmMistStatusResult^
    {
        PropertySetContext setContext;

        alljoyn_msgarg inputArgument = alljoyn_msgarg_create();
        TypeConversionHelpers::SetAllJoynMessageArg(inputArgument, "i", value);

        alljoyn_proxybusobject_setpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "warmMistStatus",
            inputArgument,
            [](QStatus status, alljoyn_proxybusobject obj, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertySetContext*>(context);
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &setContext);

        alljoyn_msgarg_destroy(inputArgument);

        setContext.Wait();

        auto result = ref new HumidifierSetWarmMistStatusResult();
        result->Status = setContext.GetStatus();
        return result;
    });
}

IAsyncOperation<HumidifierGetWarmMistStatusResult^>^ HumidifierConsumer::GetWarmMistStatusAsync()
{
    return create_async([this]() -> HumidifierGetWarmMistStatusResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "warmMistStatus",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetWarmMistStatusResult();
        result->Status = getContext.GetStatus();
        result->WarmMistStatus = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierSetMistVolumeValueResult^>^ HumidifierConsumer::SetMistVolumeValueAsync(_In_ int32 value)
{
    return create_async([this, value]() -> HumidifierSetMistVolumeValueResult^
    {
        PropertySetContext setContext;

        alljoyn_msgarg inputArgument = alljoyn_msgarg_create();
        TypeConversionHelpers::SetAllJoynMessageArg(inputArgument, "i", value);

        alljoyn_proxybusobject_setpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "mistVolumeValue",
            inputArgument,
            [](QStatus status, alljoyn_proxybusobject obj, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertySetContext*>(context);
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &setContext);

        alljoyn_msgarg_destroy(inputArgument);

        setContext.Wait();

        auto result = ref new HumidifierSetMistVolumeValueResult();
        result->Status = setContext.GetStatus();
        return result;
    });
}

IAsyncOperation<HumidifierGetMistVolumeValueResult^>^ HumidifierConsumer::GetMistVolumeValueAsync()
{
    return create_async([this]() -> HumidifierGetMistVolumeValueResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "mistVolumeValue",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetMistVolumeValueResult();
        result->Status = getContext.GetStatus();
        result->MistVolumeValue = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierSetTimerValueResult^>^ HumidifierConsumer::SetTimerValueAsync(_In_ int32 value)
{
    return create_async([this, value]() -> HumidifierSetTimerValueResult^
    {
        PropertySetContext setContext;

        alljoyn_msgarg inputArgument = alljoyn_msgarg_create();
        TypeConversionHelpers::SetAllJoynMessageArg(inputArgument, "i", value);

        alljoyn_proxybusobject_setpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "timerValue",
            inputArgument,
            [](QStatus status, alljoyn_proxybusobject obj, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertySetContext*>(context);
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &setContext);

        alljoyn_msgarg_destroy(inputArgument);

        setContext.Wait();

        auto result = ref new HumidifierSetTimerValueResult();
        result->Status = setContext.GetStatus();
        return result;
    });
}

IAsyncOperation<HumidifierGetTimerValueResult^>^ HumidifierConsumer::GetTimerValueAsync()
{
    return create_async([this]() -> HumidifierGetTimerValueResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "timerValue",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetTimerValueResult();
        result->Status = getContext.GetStatus();
        result->TimerValue = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierGetCurrentRoomTempValueResult^>^ HumidifierConsumer::GetCurrentRoomTempValueAsync()
{
    return create_async([this]() -> HumidifierGetCurrentRoomTempValueResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "currentRoomTempValue",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetCurrentRoomTempValueResult();
        result->Status = getContext.GetStatus();
        result->CurrentRoomTempValue = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierGetCurrentRoomHumidityValueResult^>^ HumidifierConsumer::GetCurrentRoomHumidityValueAsync()
{
    return create_async([this]() -> HumidifierGetCurrentRoomHumidityValueResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "currentRoomHumidityValue",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetCurrentRoomHumidityValueResult();
        result->Status = getContext.GetStatus();
        result->CurrentRoomHumidityValue = getContext.GetValue();
        return result;
    });
}

IAsyncOperation<HumidifierGetWaterTankStatusResult^>^ HumidifierConsumer::GetWaterTankStatusAsync()
{
    return create_async([this]() -> HumidifierGetWaterTankStatusResult^
    {
        PropertyGetContext<int32> getContext;
        
        alljoyn_proxybusobject_getpropertyasync(
            ProxyBusObject,
            "org.alljoyn.ControlPanel.Humidifier",
            "waterTankStatus",
            [](QStatus status, alljoyn_proxybusobject obj, const alljoyn_msgarg value, void* context)
            {
                UNREFERENCED_PARAMETER(obj);
                auto propertyContext = static_cast<PropertyGetContext<int32>*>(context);

                if (ER_OK == status)
                {
                    int32 argument;
                    TypeConversionHelpers::GetAllJoynMessageArg(value, "i", &argument);

                    propertyContext->SetValue(argument);
                }
                propertyContext->SetStatus(status);
                propertyContext->SetEvent();
            },
            c_MessageTimeoutInMilliseconds,
            &getContext);

        getContext.Wait();

        auto result = ref new HumidifierGetWaterTankStatusResult();
        result->Status = getContext.GetStatus();
        result->WaterTankStatus = getContext.GetValue();
        return result;
    });
}

void HumidifierConsumer::OnPropertyChanged(_In_ alljoyn_proxybusobject obj, _In_ PCSTR interfaceName, _In_ const alljoyn_msgarg changed, _In_ const alljoyn_msgarg invalidated)
{
    UNREFERENCED_PARAMETER(obj);
    UNREFERENCED_PARAMETER(interfaceName);
    UNREFERENCED_PARAMETER(changed);
    UNREFERENCED_PARAMETER(invalidated);
}

void HumidifierConsumer::CallCurrentRoomTempValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierCurrentRoomTempValueChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewCurrentRoomTempValue = argument0;

        consumer->Signals->CallCurrentRoomTempValueChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallCurrentRoomHumidityValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierCurrentRoomHumidityValueChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewCurrentRoomHumidityValue = argument0;

        consumer->Signals->CallCurrentRoomHumidityValueChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallWaterTankStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierWaterTankStatusChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewWaterTankStatus = argument0;

        consumer->Signals->CallWaterTankStatusChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallPowerStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierPowerStatusChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewPowerStatus = argument0;

        consumer->Signals->CallPowerStatusChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallHumidityValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierHumidityValueChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewHumidityValue = argument0;

        consumer->Signals->CallHumidityValueChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallIonStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierIonStatusChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewIonStatus = argument0;

        consumer->Signals->CallIonStatusChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallWarmMistStatusChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierWarmMistStatusChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewWarmMistStatus = argument0;

        consumer->Signals->CallWarmMistStatusChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallMistVolumeValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierMistVolumeValueChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewMistVolumeValue = argument0;

        consumer->Signals->CallMistVolumeValueChangedReceived(consumer->Signals, eventArgs);
    }
}

void HumidifierConsumer::CallTimerValueChangedSignalHandler(_In_ const alljoyn_interfacedescription_member* member, _In_ alljoyn_message message)
{
    auto source = SourceInterfaces.find(member->iface);
    if (source == SourceInterfaces.end())
    {
        return;
    }

    auto consumer = source->second->Resolve<HumidifierConsumer>();
    if (consumer->Signals != nullptr)
    {
        auto callInfo = ref new AllJoynMessageInfo(AllJoynHelpers::MultibyteToPlatformString(alljoyn_message_getsender(message)));
        auto eventArgs = ref new HumidifierTimerValueChangedReceivedEventArgs();
        eventArgs->MessageInfo = callInfo;

        int32 argument0;
        TypeConversionHelpers::GetAllJoynMessageArg(alljoyn_message_getarg(message, 0), "i", &argument0);

        eventArgs->NewTimerValue = argument0;

        consumer->Signals->CallTimerValueChangedReceived(consumer->Signals, eventArgs);
    }
}

int32 HumidifierConsumer::JoinSession(_In_ AllJoynServiceInfo^ serviceInfo)
{
    alljoyn_sessionlistener_callbacks callbacks =
    {
        AllJoynHelpers::SessionLostHandler<HumidifierConsumer>,
        AllJoynHelpers::SessionMemberAddedHandler<HumidifierConsumer>,
        AllJoynHelpers::SessionMemberRemovedHandler<HumidifierConsumer>
    };

    alljoyn_busattachment_enableconcurrentcallbacks(AllJoynHelpers::GetInternalBusAttachment(m_busAttachment));

    SessionListener = alljoyn_sessionlistener_create(&callbacks, m_weak);
    alljoyn_sessionopts sessionOpts = alljoyn_sessionopts_create(ALLJOYN_TRAFFIC_TYPE_MESSAGES, true, ALLJOYN_PROXIMITY_ANY, ALLJOYN_TRANSPORT_ANY);

    std::vector<char> sessionNameUtf8 = AllJoynHelpers::PlatformToMultibyteString(serviceInfo->UniqueName);
    RETURN_IF_QSTATUS_ERROR(alljoyn_busattachment_joinsession(
        m_nativeBusAttachment,
        &sessionNameUtf8[0],
        serviceInfo->SessionPort,
        SessionListener,
        &m_sessionId,
        sessionOpts));
    alljoyn_sessionopts_destroy(sessionOpts);

    ServiceObjectPath = serviceInfo->ObjectPath;
    std::vector<char> objectPath = AllJoynHelpers::PlatformToMultibyteString(ServiceObjectPath);

    if (objectPath.empty())
    {
        return AllJoynStatus::Fail;
    }

    ProxyBusObject = alljoyn_proxybusobject_create(m_nativeBusAttachment, &sessionNameUtf8[0], &objectPath[0], m_sessionId);
    if (nullptr == ProxyBusObject)
    {
        return AllJoynStatus::Fail;
    }


    alljoyn_interfacedescription description = alljoyn_busattachment_getinterface(m_nativeBusAttachment, "org.alljoyn.ControlPanel.Humidifier");
    if (nullptr == description)
    {
        return AllJoynStatus::Fail;
    }

    RETURN_IF_QSTATUS_ERROR(AllJoynBusObjectManager::GetBusObject(m_nativeBusAttachment, AllJoynHelpers::PlatformToMultibyteString(ServiceObjectPath).data(), &m_busObject));
   
    if (!AllJoynBusObjectManager::BusObjectIsRegistered(m_nativeBusAttachment, m_busObject))
    {
        RETURN_IF_QSTATUS_ERROR(alljoyn_busobject_addinterface(BusObject, description));
    }

    QStatus result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "currentRoomTempValueChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallCurrentRoomTempValueChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "currentRoomHumidityValueChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallCurrentRoomHumidityValueChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "waterTankStatusChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallWaterTankStatusChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "powerStatusChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallPowerStatusChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "humidityValueChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallHumidityValueChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "ionStatusChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallIonStatusChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "warmMistStatusChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallWarmMistStatusChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "mistVolumeValueChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallMistVolumeValueChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }
    result = AddSignalHandler(
        m_nativeBusAttachment,
        description,
        "timerValueChanged",
        [](const alljoyn_interfacedescription_member* member, PCSTR srcPath, alljoyn_message message) { UNREFERENCED_PARAMETER(srcPath); CallTimerValueChangedSignalHandler(member, message); });
    if (result != ER_OK)
    {
        return static_cast<int32>(result);
    }

    SourceInterfaces[description] = m_weak;

    unsigned int noneMechanismIndex = 0;
    bool authenticationMechanismsContainsNone = m_busAttachment->AuthenticationMechanisms->IndexOf(AllJoynAuthenticationMechanism::None, &noneMechanismIndex);
    QCC_BOOL interfaceIsSecure = alljoyn_interfacedescription_issecure(description);

    // If the current set of AuthenticationMechanisms supports authentication, 
    // determine whether to secure the connection.
    if (AllJoynHelpers::CanSecure(m_busAttachment->AuthenticationMechanisms))
    {
        // Secure the connection if the org.alljoyn.Bus.Secure XML annotation
        // is specified, or if None is not present in AuthenticationMechanisms.
        if (!authenticationMechanismsContainsNone || interfaceIsSecure)
        {
            RETURN_IF_QSTATUS_ERROR(alljoyn_proxybusobject_secureconnection(ProxyBusObject, QCC_FALSE));
            RETURN_IF_QSTATUS_ERROR(AllJoynBusObjectManager::TryRegisterBusObject(m_nativeBusAttachment, BusObject, true));
        }
        else
        {
            RETURN_IF_QSTATUS_ERROR(AllJoynBusObjectManager::TryRegisterBusObject(m_nativeBusAttachment, BusObject, false));
        }
    }
    else
    {
        // If the current set of AuthenticationMechanisms does not support authentication
        // but the interface requires security, report an error.
        if (interfaceIsSecure)
        {
            return static_cast<int32>(ER_BUS_NO_AUTHENTICATION_MECHANISM);
        }
        else
        {
            RETURN_IF_QSTATUS_ERROR(AllJoynBusObjectManager::TryRegisterBusObject(m_nativeBusAttachment, BusObject, false));
        }
    }

    RETURN_IF_QSTATUS_ERROR(alljoyn_proxybusobject_addinterface(ProxyBusObject, description));
    
    m_signals->Initialize(BusObject, m_sessionId);

    return AllJoynStatus::Ok;
}
