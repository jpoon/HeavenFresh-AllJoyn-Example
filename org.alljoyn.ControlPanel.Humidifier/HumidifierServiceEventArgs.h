//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace ControlPanel { namespace Humidifier {

// Methods
public ref class HumidifierPowerONCalledEventArgs sealed
{
public:
    HumidifierPowerONCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierPowerONResult^ Result
    {
        HumidifierPowerONResult^ get() { return m_result; }
        void set(_In_ HumidifierPowerONResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierPowerONResult^>^ GetResultAsync(HumidifierPowerONCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierPowerONResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierPowerONResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierPowerONResult^ m_result;
};

public ref class HumidifierPowerOFFCalledEventArgs sealed
{
public:
    HumidifierPowerOFFCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierPowerOFFResult^ Result
    {
        HumidifierPowerOFFResult^ get() { return m_result; }
        void set(_In_ HumidifierPowerOFFResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierPowerOFFResult^>^ GetResultAsync(HumidifierPowerOFFCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierPowerOFFResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierPowerOFFResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierPowerOFFResult^ m_result;
};

public ref class HumidifierSendSoftwareUpgradeFileCalledEventArgs sealed
{
public:
    HumidifierSendSoftwareUpgradeFileCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberCurrentIndex, _In_ Windows::Foundation::Collections::IVectorView<byte>^ interfaceMemberFileData);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierSendSoftwareUpgradeFileResult^ Result
    {
        HumidifierSendSoftwareUpgradeFileResult^ get() { return m_result; }
        void set(_In_ HumidifierSendSoftwareUpgradeFileResult^ value) { m_result = value; }
    }

    property uint32 CurrentIndex
    {
        uint32 get() { return m_interfaceMemberCurrentIndex; }
    }

    property Windows::Foundation::Collections::IVectorView<byte>^ FileData
    {
        Windows::Foundation::Collections::IVectorView<byte>^ get() { return m_interfaceMemberFileData; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierSendSoftwareUpgradeFileResult^>^ GetResultAsync(HumidifierSendSoftwareUpgradeFileCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSendSoftwareUpgradeFileResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSendSoftwareUpgradeFileResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierSendSoftwareUpgradeFileResult^ m_result;
    uint32 m_interfaceMemberCurrentIndex;
    Windows::Foundation::Collections::IVectorView<byte>^ m_interfaceMemberFileData;
};

// Readable Properties
public ref class HumidifierGetPowerStatusRequestedEventArgs sealed
{
public:
    HumidifierGetPowerStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetPowerStatusResult^ Result
    {
        HumidifierGetPowerStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierGetPowerStatusResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetPowerStatusResult^>^ GetResultAsync(HumidifierGetPowerStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetPowerStatusResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetPowerStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetPowerStatusResult^ m_result;
};

public ref class HumidifierGetHumidityValueRequestedEventArgs sealed
{
public:
    HumidifierGetHumidityValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetHumidityValueResult^ Result
    {
        HumidifierGetHumidityValueResult^ get() { return m_result; }
        void set(_In_ HumidifierGetHumidityValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetHumidityValueResult^>^ GetResultAsync(HumidifierGetHumidityValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetHumidityValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetHumidityValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetHumidityValueResult^ m_result;
};

public ref class HumidifierGetIonStatusRequestedEventArgs sealed
{
public:
    HumidifierGetIonStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetIonStatusResult^ Result
    {
        HumidifierGetIonStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierGetIonStatusResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetIonStatusResult^>^ GetResultAsync(HumidifierGetIonStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetIonStatusResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetIonStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetIonStatusResult^ m_result;
};

public ref class HumidifierGetWarmMistStatusRequestedEventArgs sealed
{
public:
    HumidifierGetWarmMistStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetWarmMistStatusResult^ Result
    {
        HumidifierGetWarmMistStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierGetWarmMistStatusResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetWarmMistStatusResult^>^ GetResultAsync(HumidifierGetWarmMistStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetWarmMistStatusResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetWarmMistStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetWarmMistStatusResult^ m_result;
};

public ref class HumidifierGetMistVolumeValueRequestedEventArgs sealed
{
public:
    HumidifierGetMistVolumeValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetMistVolumeValueResult^ Result
    {
        HumidifierGetMistVolumeValueResult^ get() { return m_result; }
        void set(_In_ HumidifierGetMistVolumeValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetMistVolumeValueResult^>^ GetResultAsync(HumidifierGetMistVolumeValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetMistVolumeValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetMistVolumeValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetMistVolumeValueResult^ m_result;
};

public ref class HumidifierGetTimerValueRequestedEventArgs sealed
{
public:
    HumidifierGetTimerValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetTimerValueResult^ Result
    {
        HumidifierGetTimerValueResult^ get() { return m_result; }
        void set(_In_ HumidifierGetTimerValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetTimerValueResult^>^ GetResultAsync(HumidifierGetTimerValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetTimerValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetTimerValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetTimerValueResult^ m_result;
};

public ref class HumidifierGetCurrentRoomTempValueRequestedEventArgs sealed
{
public:
    HumidifierGetCurrentRoomTempValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetCurrentRoomTempValueResult^ Result
    {
        HumidifierGetCurrentRoomTempValueResult^ get() { return m_result; }
        void set(_In_ HumidifierGetCurrentRoomTempValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetCurrentRoomTempValueResult^>^ GetResultAsync(HumidifierGetCurrentRoomTempValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetCurrentRoomTempValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetCurrentRoomTempValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetCurrentRoomTempValueResult^ m_result;
};

public ref class HumidifierGetCurrentRoomHumidityValueRequestedEventArgs sealed
{
public:
    HumidifierGetCurrentRoomHumidityValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetCurrentRoomHumidityValueResult^ Result
    {
        HumidifierGetCurrentRoomHumidityValueResult^ get() { return m_result; }
        void set(_In_ HumidifierGetCurrentRoomHumidityValueResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetCurrentRoomHumidityValueResult^>^ GetResultAsync(HumidifierGetCurrentRoomHumidityValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetCurrentRoomHumidityValueResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetCurrentRoomHumidityValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetCurrentRoomHumidityValueResult^ m_result;
};

public ref class HumidifierGetWaterTankStatusRequestedEventArgs sealed
{
public:
    HumidifierGetWaterTankStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property HumidifierGetWaterTankStatusResult^ Result
    {
        HumidifierGetWaterTankStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierGetWaterTankStatusResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<HumidifierGetWaterTankStatusResult^>^ GetResultAsync(HumidifierGetWaterTankStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierGetWaterTankStatusResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierGetWaterTankStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    HumidifierGetWaterTankStatusResult^ m_result;
};

// Writable Properties
public ref class HumidifierSetPowerStatusRequestedEventArgs sealed
{
public:
    HumidifierSetPowerStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property HumidifierSetPowerStatusResult^ Result
    {
        HumidifierSetPowerStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierSetPowerStatusResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<HumidifierSetPowerStatusResult^>^ GetResultAsync(HumidifierSetPowerStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSetPowerStatusResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSetPowerStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    HumidifierSetPowerStatusResult^ m_result;
};

public ref class HumidifierSetHumidityValueRequestedEventArgs sealed
{
public:
    HumidifierSetHumidityValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property HumidifierSetHumidityValueResult^ Result
    {
        HumidifierSetHumidityValueResult^ get() { return m_result; }
        void set(_In_ HumidifierSetHumidityValueResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<HumidifierSetHumidityValueResult^>^ GetResultAsync(HumidifierSetHumidityValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSetHumidityValueResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSetHumidityValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    HumidifierSetHumidityValueResult^ m_result;
};

public ref class HumidifierSetIonStatusRequestedEventArgs sealed
{
public:
    HumidifierSetIonStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property HumidifierSetIonStatusResult^ Result
    {
        HumidifierSetIonStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierSetIonStatusResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<HumidifierSetIonStatusResult^>^ GetResultAsync(HumidifierSetIonStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSetIonStatusResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSetIonStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    HumidifierSetIonStatusResult^ m_result;
};

public ref class HumidifierSetWarmMistStatusRequestedEventArgs sealed
{
public:
    HumidifierSetWarmMistStatusRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property HumidifierSetWarmMistStatusResult^ Result
    {
        HumidifierSetWarmMistStatusResult^ get() { return m_result; }
        void set(_In_ HumidifierSetWarmMistStatusResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<HumidifierSetWarmMistStatusResult^>^ GetResultAsync(HumidifierSetWarmMistStatusRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSetWarmMistStatusResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSetWarmMistStatusResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    HumidifierSetWarmMistStatusResult^ m_result;
};

public ref class HumidifierSetMistVolumeValueRequestedEventArgs sealed
{
public:
    HumidifierSetMistVolumeValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property HumidifierSetMistVolumeValueResult^ Result
    {
        HumidifierSetMistVolumeValueResult^ get() { return m_result; }
        void set(_In_ HumidifierSetMistVolumeValueResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<HumidifierSetMistVolumeValueResult^>^ GetResultAsync(HumidifierSetMistVolumeValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSetMistVolumeValueResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSetMistVolumeValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    HumidifierSetMistVolumeValueResult^ m_result;
};

public ref class HumidifierSetTimerValueRequestedEventArgs sealed
{
public:
    HumidifierSetTimerValueRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property int32 Value
    {
        int32 get() { return m_value; }
    }

    property HumidifierSetTimerValueResult^ Result
    {
        HumidifierSetTimerValueResult^ get() { return m_result; }
        void set(_In_ HumidifierSetTimerValueResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<HumidifierSetTimerValueResult^>^ GetResultAsync(HumidifierSetTimerValueRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<HumidifierSetTimerValueResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<HumidifierSetTimerValueResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    int32 m_value;
    HumidifierSetTimerValueResult^ m_result;
};

} } } } 
