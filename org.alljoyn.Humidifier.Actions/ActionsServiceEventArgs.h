//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace Humidifier { namespace Actions {

// Methods
public ref class ActionsSetPowerToOffCalledEventArgs sealed
{
public:
    ActionsSetPowerToOffCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetPowerToOffResult^ Result
    {
        ActionsSetPowerToOffResult^ get() { return m_result; }
        void set(_In_ ActionsSetPowerToOffResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetPowerToOffResult^>^ GetResultAsync(ActionsSetPowerToOffCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetPowerToOffResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetPowerToOffResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetPowerToOffResult^ m_result;
};

public ref class ActionsSetPowerToOnCalledEventArgs sealed
{
public:
    ActionsSetPowerToOnCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetPowerToOnResult^ Result
    {
        ActionsSetPowerToOnResult^ get() { return m_result; }
        void set(_In_ ActionsSetPowerToOnResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetPowerToOnResult^>^ GetResultAsync(ActionsSetPowerToOnCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetPowerToOnResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetPowerToOnResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetPowerToOnResult^ m_result;
};

public ref class ActionsSetHumidityTo40CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo40CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo40Result^ Result
    {
        ActionsSetHumidityTo40Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo40Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo40Result^>^ GetResultAsync(ActionsSetHumidityTo40CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo40Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo40Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo40Result^ m_result;
};

public ref class ActionsSetHumidityTo45CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo45CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo45Result^ Result
    {
        ActionsSetHumidityTo45Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo45Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo45Result^>^ GetResultAsync(ActionsSetHumidityTo45CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo45Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo45Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo45Result^ m_result;
};

public ref class ActionsSetHumidityTo50CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo50CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo50Result^ Result
    {
        ActionsSetHumidityTo50Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo50Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo50Result^>^ GetResultAsync(ActionsSetHumidityTo50CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo50Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo50Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo50Result^ m_result;
};

public ref class ActionsSetHumidityTo55CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo55CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo55Result^ Result
    {
        ActionsSetHumidityTo55Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo55Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo55Result^>^ GetResultAsync(ActionsSetHumidityTo55CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo55Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo55Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo55Result^ m_result;
};

public ref class ActionsSetHumidityTo60CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo60CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo60Result^ Result
    {
        ActionsSetHumidityTo60Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo60Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo60Result^>^ GetResultAsync(ActionsSetHumidityTo60CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo60Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo60Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo60Result^ m_result;
};

public ref class ActionsSetHumidityTo65CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo65CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo65Result^ Result
    {
        ActionsSetHumidityTo65Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo65Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo65Result^>^ GetResultAsync(ActionsSetHumidityTo65CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo65Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo65Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo65Result^ m_result;
};

public ref class ActionsSetHumidityTo70CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo70CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo70Result^ Result
    {
        ActionsSetHumidityTo70Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo70Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo70Result^>^ GetResultAsync(ActionsSetHumidityTo70CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo70Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo70Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo70Result^ m_result;
};

public ref class ActionsSetHumidityTo75CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo75CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo75Result^ Result
    {
        ActionsSetHumidityTo75Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo75Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo75Result^>^ GetResultAsync(ActionsSetHumidityTo75CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo75Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo75Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo75Result^ m_result;
};

public ref class ActionsSetHumidityTo80CalledEventArgs sealed
{
public:
    ActionsSetHumidityTo80CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetHumidityTo80Result^ Result
    {
        ActionsSetHumidityTo80Result^ get() { return m_result; }
        void set(_In_ ActionsSetHumidityTo80Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetHumidityTo80Result^>^ GetResultAsync(ActionsSetHumidityTo80CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetHumidityTo80Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetHumidityTo80Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetHumidityTo80Result^ m_result;
};

public ref class ActionsSetWarmMistToOFFCalledEventArgs sealed
{
public:
    ActionsSetWarmMistToOFFCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetWarmMistToOFFResult^ Result
    {
        ActionsSetWarmMistToOFFResult^ get() { return m_result; }
        void set(_In_ ActionsSetWarmMistToOFFResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetWarmMistToOFFResult^>^ GetResultAsync(ActionsSetWarmMistToOFFCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetWarmMistToOFFResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetWarmMistToOFFResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetWarmMistToOFFResult^ m_result;
};

public ref class ActionsSetWarmMistToLOWCalledEventArgs sealed
{
public:
    ActionsSetWarmMistToLOWCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetWarmMistToLOWResult^ Result
    {
        ActionsSetWarmMistToLOWResult^ get() { return m_result; }
        void set(_In_ ActionsSetWarmMistToLOWResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetWarmMistToLOWResult^>^ GetResultAsync(ActionsSetWarmMistToLOWCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetWarmMistToLOWResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetWarmMistToLOWResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetWarmMistToLOWResult^ m_result;
};

public ref class ActionsSetWarmMistToHICalledEventArgs sealed
{
public:
    ActionsSetWarmMistToHICalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetWarmMistToHIResult^ Result
    {
        ActionsSetWarmMistToHIResult^ get() { return m_result; }
        void set(_In_ ActionsSetWarmMistToHIResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetWarmMistToHIResult^>^ GetResultAsync(ActionsSetWarmMistToHICalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetWarmMistToHIResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetWarmMistToHIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetWarmMistToHIResult^ m_result;
};

public ref class ActionsSetMistVolumeToLOWCalledEventArgs sealed
{
public:
    ActionsSetMistVolumeToLOWCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetMistVolumeToLOWResult^ Result
    {
        ActionsSetMistVolumeToLOWResult^ get() { return m_result; }
        void set(_In_ ActionsSetMistVolumeToLOWResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetMistVolumeToLOWResult^>^ GetResultAsync(ActionsSetMistVolumeToLOWCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetMistVolumeToLOWResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetMistVolumeToLOWResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetMistVolumeToLOWResult^ m_result;
};

public ref class ActionsSetMistVolumeToMEDCalledEventArgs sealed
{
public:
    ActionsSetMistVolumeToMEDCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetMistVolumeToMEDResult^ Result
    {
        ActionsSetMistVolumeToMEDResult^ get() { return m_result; }
        void set(_In_ ActionsSetMistVolumeToMEDResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetMistVolumeToMEDResult^>^ GetResultAsync(ActionsSetMistVolumeToMEDCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetMistVolumeToMEDResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetMistVolumeToMEDResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetMistVolumeToMEDResult^ m_result;
};

public ref class ActionsSetMistVolumeToHICalledEventArgs sealed
{
public:
    ActionsSetMistVolumeToHICalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsSetMistVolumeToHIResult^ Result
    {
        ActionsSetMistVolumeToHIResult^ get() { return m_result; }
        void set(_In_ ActionsSetMistVolumeToHIResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsSetMistVolumeToHIResult^>^ GetResultAsync(ActionsSetMistVolumeToHICalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsSetMistVolumeToHIResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsSetMistVolumeToHIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsSetMistVolumeToHIResult^ m_result;
};

// Readable Properties
public ref class ActionsGetVersionRequestedEventArgs sealed
{
public:
    ActionsGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ActionsGetVersionResult^ Result
    {
        ActionsGetVersionResult^ get() { return m_result; }
        void set(_In_ ActionsGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ActionsGetVersionResult^>^ GetResultAsync(ActionsGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ActionsGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ActionsGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ActionsGetVersionResult^ m_result;
};

// Writable Properties
} } } } 
